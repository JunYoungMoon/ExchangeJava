server:
#  address: 0.0.0.0
  port: 8081

spring:
#  main:
#    allow-bean-definition-overriding: true
  batch:
    jdbc:
      initialize-schema: always
    job:
      name: coinOrderJob

  profiles:
    active: dev

  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true

  exchange:
    slave:
      datasource:
        hikari:
          jdbc-url: jdbc:mysql://localhost:14306/Exchange
          username: root
          password: 1234

  coin:
    master:
      datasource:
        hikari:
          jdbc-url: jdbc:mysql://localhost:${SHARD_MASTER_PORT}/Exchange
          username: root
          password: 1234
    slave:
      datasource:
        hikari:
          jdbc-url: jdbc:mysql://localhost:${SHARD_SLAVE_PORT}/Exchange
          username: root
          password: 1234

#  jpa:
#    properties:
#      hibernate:
#        format_sql: true
#        show_sql: true

  data:
    redis:
#      repositories:
#        enabled: false
      host: localhost
      port: 6379

#  kafka:
#    bootstrap-servers: localhost:9092
#    consumer:
#      group-id: coinOrderGroup
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        allow.auto.create.topics: false
#        spring:
#          json:
#            trusted.packages: "*"
#            type.mapping: "coinOrder:com.mjy.coin.dto.CoinOrderDTO"

#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        allow.auto.create.topics: false
#        spring:
#          json:
#            trusted.packages: "*"
##            type.mapping: "coinOrder:com.mjy.coin.dto.CoinOrderDTO"
#            type.mapping: "coinOrderList:java.util.ArrayList<com.mjy.coin.dto.CoinOrderDTO>"

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus
