spring:
  data:
    redis:
      #      repositories:
      #        enabled: false
      host: localhost
      port: 6379

  cassandra:
    contact-points: localhost
    port: 9042
    local-datacenter: datacenter1
    schema-action: create_if_not_exists
    username: admin
    password: admin
    keyspace-name: exchange

  batch:
    jdbc:
      initialize-schema: always
    job:
      enabled: false
  #        name: coinOrderJob

  coin:
    master:
      datasource:
        hikari:
          jdbc-url: jdbc:mysql://localhost:${SHARD_MASTER_PORT}/Exchange
#          jdbc-url: jdbc:mysql://localhost:15306/Exchange
          username: root
          password: 1234
#    slave:
#      datasource:
#        hikari:
#          jdbc-url: jdbc:mysql://localhost:${SHARD_SLAVE_PORT}/Exchange
#  #        jdbc-url: jdbc:mysql://localhost:16306/Exchange
#          username: root
#          password: 1234

#  exchange:
#    slave:
#      datasource:
#        hikari:
#          jdbc-url: jdbc:mysql://localhost:14306/Exchange
#          username: root
#          password: 1234

#  kafka:
#    bootstrap-servers: localhost:9092
#    consumer:
#      group-id: coinOrderGroup
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        allow.auto.create.topics: false
#        spring:
#          json:
#            trusted.packages: "*"
#            type.mapping: "coinOrder:com.mjy.coin.dto.CoinOrderDTO"
#
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        allow.auto.create.topics: false
#        spring:
#          json:
#            trusted.packages: "*"
#            #            type.mapping: "coinOrder:com.mjy.coin.dto.CoinOrderDTO"
#            type.mapping: "coinOrderList:java.util.ArrayList<com.mjy.coin.dto.CoinOrderDTO>"

server:
  port: 8082

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus

logging:
  config: classpath:logback-${spring.profiles.active}.xml
